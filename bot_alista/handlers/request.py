from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states import RequestStates
from keyboards.navigation import back_menu
from services.email import send_email
from services.pdf_report import generate_request_pdf
from utils.reset import reset_to_menu
from config import EMAIL_TO

import asyncio
import os
import uuid

router = Router()


async def _check_exit(message: types.Message, state: FSMContext) -> bool:
    """Return to main menu if user pressed a navigation button or typed 'back'."""
    text = (message.text or "").lower()
    if text in {"üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨Ö –Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥", "back"}:
        await reset_to_menu(message, state)
        return True
    return False

# 1Ô∏è‚É£ –°—Ç–∞—Ä—Ç –∑–∞—è–≤–∫–∏
@router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_request(message: types.Message, state: FSMContext):
    await state.set_state(RequestStates.request_name)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ ‚Äî —Ç–æ–ª—å–∫–æ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞:", reply_markup=kb)

# 2Ô∏è‚É£ –§–ò–û
@router.message(RequestStates.request_name)
async def get_name(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    await state.update_data(name=message.text.strip())
    await state.set_state(RequestStates.request_car)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:", reply_markup=back_menu())

# 3Ô∏è‚É£ –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å
@router.message(RequestStates.request_car)
async def get_car(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    await state.update_data(car=message.text.strip())
    await state.set_state(RequestStates.request_contact)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω, e‚Äëmail):", reply_markup=back_menu())

# 4Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç—ã
@router.message(RequestStates.request_contact)
async def get_contact(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    await state.update_data(contact=message.text.strip())
    await state.set_state(RequestStates.request_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ (‚Ç¨):", reply_markup=back_menu())

# 5Ô∏è‚É£ –°—Ç–æ–∏–º–æ—Å—Ç—å
@router.message(RequestStates.request_price)
async def get_price(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    try:
        price = float(message.text.replace(",", "."))
    except:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤ –µ–≤—Ä–æ.")
    await state.update_data(price=price)
    await state.set_state(RequestStates.request_comment)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):", reply_markup=back_menu())

# 6Ô∏è‚É£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
@router.message(RequestStates.request_comment)
async def get_comment(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    comment = message.text.strip()
    if comment.lower() == "–Ω–µ—Ç":
        comment = ""
    await state.update_data(comment=comment)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    email_body = (
        f"üìÑ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –†–ê–°–¢–ê–ú–û–ñ–ö–£\n\n"
        f"üë§ –§–ò–û: {data['name']}\n"
        f"üöó –ê–≤—Ç–æ: {data['car']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data['contact']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ: {data['price']} ‚Ç¨\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
    )

    # –°–æ–∑–¥–∞—ë–º PDF –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
    pdf_path = f"customs_request_{uuid.uuid4().hex}.pdf"
    generate_request_pdf(data, pdf_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ e-mail –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    email_sent = await asyncio.to_thread(
        send_email,
        EMAIL_TO,
        "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É",
        email_body,
        pdf_path,
    )
    if email_sent:
        await message.answer(
            "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
            reply_markup=back_menu(),
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_menu(),
        )
        
    #–ß–∏—Å—Ç–∏–º PDF
    if os.path.exists(pdf_path):
        os.remove(pdf_path)

    await reset_to_menu(message, state)
