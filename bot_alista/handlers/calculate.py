import uuid
import os
import asyncio

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states import CalculationStates
from keyboards.navigation import back_menu, yes_no_menu
from services.customs import calculate_customs, get_cbr_eur_rate
from services.email import send_email
from services.pdf_report import generate_calculation_pdf
from aiogram.types import FSInputFile
from utils.reset import reset_to_menu

router = Router()


async def _check_exit(message: types.Message, state: FSMContext) -> bool:
    """Return to main menu if user pressed a navigation button."""
    if message.text in {"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚¨Ö –ù–∞–∑–∞–¥"}:
        await reset_to_menu(message, state)
        return True
    return False

# 1Ô∏è‚É£ –°—Ç–∞—Ä—Ç —Ä–∞—Å—á—ë—Ç–∞
@router.message(F.text == "üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫—É")
async def start_calculation(message: types.Message, state: FSMContext):
    await state.set_state(CalculationStates.calc_type)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–∏–ø–∞–º–∏ –∞–≤—Ç–æ + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ë–µ–Ω–∑–∏–Ω"), types.KeyboardButton(text="–î–∏–∑–µ–ª—å")],
            [types.KeyboardButton(text="–ì–∏–±—Ä–∏–¥"), types.KeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ")],
            [types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ:", reply_markup=kb)

# 2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∞–≤—Ç–æ
@router.message(CalculationStates.calc_type)
async def get_car_type(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    if message.text not in ["–ë–µ–Ω–∑–∏–Ω", "–î–∏–∑–µ–ª—å", "–ì–∏–±—Ä–∏–¥", "–≠–ª–µ–∫—Ç—Ä–æ"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ –∫–Ω–æ–ø–∫–æ–π.")
    await state.update_data(car_type=message.text)
    await state.set_state(CalculationStates.calc_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞–≤—Ç–æ (‚Ç¨):", reply_markup=back_menu())

# 3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
@router.message(CalculationStates.calc_price)
async def get_price(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    try:
        price = float(message.text.replace(",", "."))
    except:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤ –µ–≤—Ä–æ.")
    await state.update_data(price=price)
    data = await state.get_data()
    if data["car_type"] != "–≠–ª–µ–∫—Ç—Ä–æ":
        await state.set_state(CalculationStates.calc_engine)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (—Å–º¬≥):", reply_markup=back_menu())
    else:
        await state.set_state(CalculationStates.calc_power)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å. –∏–ª–∏ –∫–í—Ç):", reply_markup=back_menu())

# 4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
@router.message(CalculationStates.calc_engine)
async def get_engine(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    try:
        engine = int(message.text)
    except:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º¬≥.")
    await state.update_data(engine=engine)
    await state.set_state(CalculationStates.calc_power)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.—Å. –∏–ª–∏ –∫–í—Ç):", reply_markup=back_menu())

# 5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏
@router.message(CalculationStates.calc_power)
async def get_power(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    try:
        val = message.text.lower().replace(",", ".")
        if "–∫–≤—Ç" in val or "kw" in val:
            power_kw = float(''.join(c for c in val if c.isdigit() or c == "."))
            power_hp = power_kw * 1.35962
        else:
            power_hp = float(''.join(c for c in val if c.isdigit() or c == "."))
    except:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å (–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 110 –∫–í—Ç).")
    await state.update_data(power_hp=round(power_hp, 1))
    await state.set_state(CalculationStates.calc_year)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ:", reply_markup=back_menu())

# 6Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞
@router.message(CalculationStates.calc_year)
async def get_year(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    try:
        year = int(message.text)
        if year < 1980 or year > 2100:
            raise ValueError
    except:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞.")
    await state.update_data(year=year)
    await state.set_state(CalculationStates.calc_weight)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É –∞–≤—Ç–æ (–∫–≥):", reply_markup=back_menu())

# 7Ô∏è‚É£ –ú–∞—Å—Å–∞ –∞–≤—Ç–æ ‚Üí –ø—Ä–æ–±—É–µ–º –∫—É—Ä—Å –¶–ë –†–§
@router.message(CalculationStates.calc_weight)
async def get_weight(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    try:
        weight = int(message.text)
    except:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∞—Å—Å—É –≤ –∫–≥.")
    await state.update_data(weight=weight)

    eur_rate = get_cbr_eur_rate()
    if eur_rate is None:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –µ–≤—Ä–æ –¶–ë –†–§.\n"
            "üì• –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –µ–≤—Ä–æ –≤—Ä—É—á–Ω—É—é (‚ÇΩ –∑–∞ ‚Ç¨):",
            reply_markup=back_menu()
        )
        return await state.set_state(CalculationStates.manual_eur_rate)

    await state.update_data(eur_rate=eur_rate)
    await run_calculation(state, message)

# 8Ô∏è‚É£ –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫—É—Ä—Å–∞
@router.message(CalculationStates.manual_eur_rate)
async def manual_rate(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    try:
        eur_rate = float(message.text.replace(",", "."))
    except:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 97.25")
    await state.update_data(eur_rate=eur_rate)
    await run_calculation(state, message)

# 9Ô∏è‚É£ –†–∞—Å—á—ë—Ç –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def run_calculation(state: FSMContext, message: types.Message):
    data = await state.get_data()
    engine = data.get("engine", 0)
    eur_rate = data.get("eur_rate")

    result = calculate_customs(
        price_eur=data["price"],
        engine_cc=engine,
        year=data["year"],
        car_type=data["car_type"],
        power_hp=data["power_hp"],
        weight_kg=data["weight"],
        eur_rate=eur_rate,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF
    await state.update_data(result=result)

    text = (
        f"üí∞ –†–ê–°–ß–Å–¢ ({data['car_type']})\n\n"
        f"–¶–µ–Ω–∞ –∞–≤—Ç–æ: {result['price_eur']} ‚Ç¨\n"
        f"–ö—É—Ä—Å: {result['eur_rate']} ‚ÇΩ\n"
        f"–ü–æ—à–ª–∏–Ω–∞: {result['duty_eur']} ‚Ç¨\n"
        f"–ê–∫—Ü–∏–∑: {result['excise_eur']} ‚Ç¨\n"
        f"–ù–î–°: {result['vat_eur']} ‚Ç¨\n"
        f"–£—Ç–∏–ª—å—Å–±–æ—Ä: {result['util_eur']} ‚Ç¨\n"
        f"–°–±–æ—Ä: {result['fee_eur']} ‚Ç¨\n\n"
        f"–ò–¢–û–ì–û: {result['total_eur']} ‚Ç¨ ({result['total_rub']} ‚ÇΩ)"
    )

    await message.answer(text)
    await message.answer(
        "üìß –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å PDF‚Äë–æ—Ç—á—ë—Ç –Ω–∞ e‚Äëmail?",
        reply_markup=yes_no_menu(),
    )
    await state.set_state(CalculationStates.email_confirm)


# üîü –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É PDF
@router.message(CalculationStates.email_confirm)
async def confirm_pdf(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    if message.text == "–î–∞":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à e‚Äëmail –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PDF‚Äë–æ—Ç—á—ë—Ç–∞:",
            reply_markup=back_menu(),
        )
        await state.set_state(CalculationStates.email_request)
    elif message.text == "–ù–µ—Ç":
        await message.answer("–û—Ç—á—ë—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        await reset_to_menu(message, state)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç: '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.",
            reply_markup=yes_no_menu(),
        )


# 1Ô∏è‚É£1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º email –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
@router.message(CalculationStates.email_request)
async def send_pdf_report_to_user(message: types.Message, state: FSMContext):
    if await _check_exit(message, state):
        return
    user_email = message.text.strip()

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
    if "@" not in user_email or "." not in user_email:
        return await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.", reply_markup=back_menu()
        )

    data = await state.get_data()
    result = data.get("result")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    pdf_path = f"customs_report_{uuid.uuid4().hex}.pdf"
    generate_calculation_pdf(result, data, pdf_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç
    await message.answer_document(
        FSInputFile(pdf_path), caption="üìÑ –í–∞—à —Ä–∞—Å—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –Ω–∞ –ø–æ—á—Ç—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    email_sent = await asyncio.to_thread(
        send_email,
        to_email=user_email,
        subject="–í–∞—à —Ä–∞—Å—á—ë—Ç —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏",
        body="–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ PDF‚Äë–æ—Ç—á—ë—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á—ë—Ç–∞.",
        attachment_path=pdf_path,
    )

    if email_sent:
        await message.answer(
            "‚úÖ PDF‚Äë–æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É!", reply_markup=back_menu()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF‚Äë–æ—Ç—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_menu(),
        )

    # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if os.path.exists(pdf_path):
        os.remove(pdf_path)

    await reset_to_menu(message, state)
